#![no_std]

mod wasm4;
use core::arch::wasm32;
use wasm4::*;

pub struct Game {
    cat: Cat,
    frame_count: u32,
}

impl Game {
    pub const fn new() -> Self {
        Game {
            cat: Cat::new(),
            frame_count: 0,
        }
    }

    fn update(&mut self) {
        self.frame_count += 1;
    }

    fn input(&mut self) {
        let gamepad: u8 = get_gamepad();

        let mut direction: Option<u8> = None;
        if gamepad & BUTTON_UP != 0 {
            direction = Some(0);
        } else if gamepad & BUTTON_RIGHT != 0 {
            direction = Some(1);
        } else if gamepad & BUTTON_DOWN != 0 {
            direction = Some(2);
        } else if gamepad & BUTTON_LEFT != 0 {
            direction = Some(3);
        }
        self.cat.set_direction(direction, self.frame_count);
    }
}

pub struct Cat {
    state: u8,     // 0 = idle, 1 = move 1, 2 = move 2
    direction: u8, // 0 = north, 1 = east, 2 = south, 3 = west
    position: (usize, usize),
}

impl Cat {
    pub const fn new() -> Self {
        Cat {
            state: 0,
            direction: 0,
            position: (0, 0),
        }
    }

    pub fn update(&mut self) {
        if self.state == 0 {
            return;
        } else {
            match self.direction {
                0 => {
                    if self.position.1 > 0 {
                        self.position.1 -= 1;
                    }
                }
                1 => {
                    if self.position.0 < (SCREEN_SIZE - 16) as usize {
                        self.position.0 += 1;
                    }
                }
                2 => {
                    if self.position.1 < (SCREEN_SIZE - 16) as usize {
                        self.position.1 += 1;
                    }
                }
                3 => {
                    if self.position.0 > 0 {
                        self.position.0 -= 1;
                    }
                }
                _ => {}
            }
        }
    }

    pub fn draw(&self) {
        let mut flags_mask = SPRITESHEET_MASK_FLAGS;
        let mut flags = SPRITESHEET_FLAGS;
        let mut sprite_x_offset = 0;
        let mut sprite_y_offset = 0;

        match self.direction {
            0 => {
                sprite_y_offset = 32;
            }
            1 => {
                sprite_y_offset = 16;
            }
            3 => {
                sprite_y_offset = 16;
                flags_mask = SPRITESHEET_MASK_FLAGS | BLIT_FLIP_X;
                flags = SPRITESHEET_FLAGS | BLIT_FLIP_X;
            }
            _ => {}
        }

        match self.state {
            1 => {
                sprite_x_offset = 16;
            }
            2 => {
                sprite_x_offset = 32;
            }
            _ => {}
        }

        set_colors((0x2431 & 0xf) << 4);
        blit_sub(
            &SPRITESHEET_MASK,
            self.position.0 as i32,
            self.position.1 as i32,
            16,
            16,
            sprite_x_offset,
            sprite_y_offset,
            SPRITESHEET_MASK_WIDTH,
            flags_mask,
        );

        set_colors(0x2431 & 0xfff0);
        blit_sub(
            &SPRITESHEET,
            self.position.0 as i32,
            self.position.1 as i32,
            16,
            16,
            sprite_x_offset,
            sprite_y_offset,
            SPRITESHEET_WIDTH,
            flags,
        );
    }

    pub fn set_direction(&mut self, direction: Option<u8>, frame_count: u32) {
        if direction.is_some() {
            if self.state == 0 {
                self.state = 1;
            } else {
                if frame_count % 30 == 0 {
                    if self.state == 1 {
                        self.state = 2;
                    } else {
                        self.state = 1;
                    }
                }
            }
            self.direction = direction.unwrap();
        } else {
            self.state = 0;
        }
    }
}

static mut GAME: Game = Game::new();

const SPRITESHEET_MASK_WIDTH: u32 = 48;
const SPRITESHEET_MASK_HEIGHT: u32 = 112;
const SPRITESHEET_MASK_FLAGS: u32 = 0; // BLIT_1BPP
const SPRITESHEET_MASK: [u8; 672] = [
    0x10, 0x88, 0x11, 0x08, 0x10, 0x88, 0x39, 0xdc, 0x3b, 0x9c, 0x39, 0xdc, 0x3f, 0xfc, 0x3f, 0xfc,
    0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0x3f, 0xfc,
    0x3f, 0xfc, 0x3f, 0xfc, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc,
    0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc,
    0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc,
    0x3f, 0xf8, 0x1f, 0xfc, 0x1c, 0x38, 0x1c, 0x10, 0x08, 0x38, 0x08, 0x10, 0x08, 0x00, 0x00, 0x10,
    0x21, 0x02, 0x21, 0x02, 0x21, 0x02, 0x73, 0x87, 0x73, 0x87, 0x73, 0x87, 0xe3, 0xff, 0xe3, 0xff,
    0xe3, 0xff, 0xe3, 0xff, 0xe3, 0xff, 0xe3, 0xff, 0xe7, 0xff, 0xe7, 0xff, 0xe7, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc,
    0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0x7f, 0xfc, 0xff, 0xf8, 0xff, 0xfc,
    0x7f, 0xfc, 0xff, 0xf8, 0xfc, 0x7c, 0x7c, 0xfc, 0xfc, 0x78, 0x48, 0x28, 0x28, 0x48, 0x48, 0x30,
    0x10, 0x88, 0x10, 0x88, 0x10, 0x88, 0x39, 0xdc, 0x39, 0xdc, 0x39, 0xdc, 0x3f, 0xfc, 0x3f, 0xfc,
    0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0x3f, 0xfc,
    0x3f, 0xfc, 0x3f, 0xfc, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc,
    0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc,
    0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x3f, 0xfc, 0x1f, 0xf8,
    0x1f, 0xf8, 0x1f, 0xf8, 0x1c, 0x38, 0x08, 0x38, 0x18, 0x10, 0x08, 0x10, 0x00, 0x10, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x78,
    0x00, 0x78, 0x00, 0x78, 0x03, 0xfc, 0x03, 0xfc, 0x03, 0xfc, 0x0f, 0xfe, 0x0f, 0xfe, 0x0f, 0xfe,
    0x1f, 0xff, 0x7f, 0xff, 0x1f, 0xff, 0x7f, 0xfe, 0xff, 0xfe, 0x7f, 0xfe, 0xf3, 0xfc, 0x73, 0xfc,
    0xf3, 0xfc, 0x61, 0x10, 0x00, 0x90, 0x61, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x40, 0x07, 0x00, 0x03, 0x80,
    0x00, 0xe0, 0x03, 0x80, 0x01, 0xc0, 0x00, 0xe0, 0x01, 0xc0, 0x01, 0xc0, 0x01, 0xc0, 0x01, 0xc0,
    0x01, 0xc0, 0x01, 0xc0, 0x03, 0xe0, 0x03, 0xe0, 0x03, 0xe0, 0x0f, 0xf8, 0x0f, 0xf8, 0x0f, 0xf8,
    0x1f, 0xfc, 0x1f, 0xfc, 0x1f, 0xfc, 0x1f, 0xfc, 0x1f, 0xfc, 0x1f, 0xfc, 0x0f, 0xf8, 0x0f, 0xf8,
    0x0f, 0xf8, 0x07, 0xf0, 0x07, 0xf0, 0x07, 0xf0, 0x0f, 0xf8, 0x0f, 0xe0, 0x03, 0xf8, 0x05, 0xd0,
    0x05, 0xc0, 0x01, 0xd0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x01, 0xc0, 0x01, 0xc0,
    0x01, 0xc0, 0x0f, 0xf8, 0x0f, 0xf8, 0x0f, 0xf8, 0x1f, 0xfc, 0x1f, 0xfc, 0x1f, 0xfc, 0x1f, 0xfc,
    0x1f, 0xfc, 0x1f, 0xfc, 0x1f, 0xfc, 0x1f, 0xfc, 0x1f, 0xfc, 0x0f, 0xf8, 0x0f, 0xf8, 0x0f, 0xf8,
    0x03, 0xe0, 0x03, 0xe0, 0x03, 0xe0, 0x03, 0xe0, 0x03, 0xe0, 0x03, 0xe0, 0x07, 0xf0, 0x07, 0xc0,
    0x01, 0xf0, 0x03, 0xe0, 0x03, 0xc0, 0x01, 0xe0, 0x03, 0x80, 0x01, 0xc0, 0x00, 0xe0, 0x07, 0x00,
    0x03, 0x80, 0x00, 0xe0, 0x02, 0x00, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8,
    0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

const SPRITESHEET_WIDTH: u32 = 48;
const SPRITESHEET_HEIGHT: u32 = 112;
const SPRITESHEET_FLAGS: u32 = 1; // BLIT_2BPP
const SPRITESHEET: [u8; 1344] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x40,
    0x01, 0x02, 0x00, 0x40, 0x01, 0x00, 0x80, 0x40, 0x02, 0x40, 0x41, 0x80, 0x02, 0x40, 0x41, 0x80,
    0x02, 0x41, 0x01, 0x80, 0x01, 0xaa, 0xaa, 0x40, 0x01, 0xaa, 0xaa, 0x40, 0x01, 0xaa, 0xaa, 0x40,
    0x0a, 0x96, 0x96, 0xa0, 0x0a, 0x96, 0x96, 0xa0, 0x0a, 0x96, 0x96, 0xa0, 0x02, 0xa2, 0x8a, 0x80,
    0x02, 0xa2, 0x8a, 0x80, 0x02, 0xa2, 0x8a, 0x80, 0x0a, 0xaa, 0xaa, 0xa0, 0x0a, 0xaa, 0xaa, 0xa0,
    0x0a, 0xaa, 0xaa, 0xa0, 0x02, 0xa9, 0xda, 0x80, 0x02, 0xa9, 0xda, 0x80, 0x02, 0xa7, 0x6a, 0x80,
    0x00, 0x6a, 0x69, 0x00, 0x00, 0x6a, 0x69, 0x00, 0x00, 0x69, 0xa9, 0x00, 0x01, 0x5a, 0xa5, 0x40,
    0x01, 0x5a, 0xa5, 0x40, 0x01, 0x5a, 0xa5, 0x40, 0x02, 0x55, 0x55, 0x80, 0x02, 0x55, 0x55, 0x80,
    0x02, 0x55, 0x55, 0x80, 0x01, 0x5a, 0xa5, 0x40, 0x01, 0x5a, 0xa5, 0x40, 0x01, 0x5a, 0xa5, 0x40,
    0x01, 0x5a, 0xa5, 0x40, 0x01, 0x5a, 0xa5, 0x40, 0x01, 0x5a, 0xa5, 0x40, 0x01, 0x40, 0x01, 0x40,
    0x01, 0x40, 0x02, 0x00, 0x00, 0x80, 0x01, 0x40, 0x00, 0x80, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x04,
    0x08, 0x01, 0x00, 0x04, 0x08, 0x01, 0x00, 0x04, 0x10, 0x02, 0x40, 0x14, 0x10, 0x02, 0x40, 0x14,
    0x10, 0x02, 0x40, 0x14, 0x10, 0x01, 0xaa, 0xa8, 0x10, 0x01, 0xaa, 0xa8, 0x10, 0x01, 0xaa, 0xa8,
    0x10, 0x0a, 0x96, 0x58, 0x10, 0x0a, 0x96, 0x58, 0x10, 0x0a, 0x96, 0x58, 0x10, 0x02, 0xa2, 0x88,
    0x10, 0x02, 0xa2, 0x88, 0x10, 0x02, 0xa2, 0x88, 0x16, 0x4a, 0xaa, 0xa8, 0x16, 0x4a, 0xaa, 0xa8,
    0x16, 0x4a, 0xaa, 0xa8, 0x19, 0x60, 0xa9, 0xd8, 0x19, 0x60, 0xa9, 0xd8, 0x19, 0x60, 0xa9, 0xd8,
    0x19, 0x65, 0x2a, 0x60, 0x19, 0x65, 0x2a, 0x60, 0x19, 0x65, 0x2a, 0x60, 0x15, 0x55, 0x5a, 0x80,
    0x15, 0x55, 0x5a, 0x80, 0x15, 0x55, 0x5a, 0x80, 0x19, 0x65, 0x55, 0x40, 0x19, 0x65, 0x55, 0x40,
    0x19, 0x65, 0x55, 0x40, 0x15, 0x55, 0x56, 0x40, 0x15, 0x55, 0x5a, 0x40, 0x15, 0x55, 0x56, 0x80,
    0x16, 0xaa, 0x96, 0x40, 0x05, 0xaa, 0x5a, 0x40, 0x16, 0xaa, 0x96, 0x00, 0x14, 0x50, 0x04, 0x40,
    0x05, 0x10, 0x10, 0x40, 0x14, 0x50, 0x05, 0x00, 0x20, 0x80, 0x08, 0x80, 0x08, 0x80, 0x20, 0x80,
    0x20, 0x80, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x40,
    0x01, 0x00, 0x80, 0x40, 0x01, 0x00, 0x80, 0x40, 0x01, 0x40, 0x11, 0x40, 0x01, 0x40, 0x41, 0x40,
    0x01, 0x41, 0x01, 0x40, 0x01, 0x55, 0x11, 0x40, 0x01, 0x54, 0x45, 0x40, 0x01, 0x51, 0x15, 0x40,
    0x09, 0x68, 0x49, 0x60, 0x09, 0x68, 0x49, 0x60, 0x09, 0x61, 0x29, 0x60, 0x01, 0x91, 0x16, 0x40,
    0x01, 0x91, 0x16, 0x40, 0x01, 0x94, 0x46, 0x40, 0x08, 0x61, 0x29, 0x20, 0x08, 0x61, 0x29, 0x20,
    0x08, 0x68, 0x49, 0x20, 0x00, 0x91, 0x16, 0x00, 0x00, 0x91, 0x16, 0x00, 0x00, 0x94, 0x46, 0x00,
    0x02, 0x51, 0x15, 0x80, 0x02, 0x51, 0x15, 0x80, 0x02, 0x54, 0x45, 0x80, 0x01, 0x55, 0x55, 0x40,
    0x01, 0x55, 0x55, 0x40, 0x01, 0x55, 0x55, 0x40, 0x01, 0x57, 0x55, 0x40, 0x01, 0x57, 0x55, 0x40,
    0x01, 0x55, 0xd5, 0x40, 0x01, 0x55, 0x55, 0x40, 0x01, 0x55, 0x55, 0x40, 0x01, 0x55, 0x55, 0x40,
    0x01, 0x55, 0x55, 0x40, 0x01, 0x55, 0x55, 0x40, 0x01, 0x55, 0x55, 0x40, 0x00, 0x50, 0x05, 0x00,
    0x00, 0x80, 0x05, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
    0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x25, 0x80, 0x00, 0x00, 0x25, 0x80,
    0x00, 0x00, 0x25, 0x80, 0x00, 0x0a, 0xa6, 0xe0, 0x00, 0x0a, 0xa6, 0xe0, 0x00, 0x0a, 0xa6, 0xe0,
    0x00, 0x5a, 0xaa, 0xe8, 0x00, 0x5a, 0xaa, 0xe8, 0x00, 0x5a, 0xaa, 0xe8, 0x01, 0x0a, 0xaa, 0xa0,
    0x15, 0x0a, 0xaa, 0xa0, 0x01, 0x0a, 0xaa, 0xa0, 0x14, 0x02, 0x02, 0x00, 0x00, 0x00, 0x82, 0x00,
    0x14, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x80, 0x00,
    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x02, 0xa0, 0x00, 0x00, 0x02, 0xa0, 0x00,
    0x00, 0x02, 0xa0, 0x00, 0x00, 0x0a, 0xa8, 0x00, 0x00, 0x0a, 0xa8, 0x00, 0x00, 0x0a, 0xa8, 0x00,
    0x00, 0xa2, 0xa2, 0x80, 0x00, 0xa2, 0xa2, 0x80, 0x00, 0xa2, 0xa2, 0x80, 0x00, 0x9a, 0xa9, 0x80,
    0x00, 0x9a, 0xa9, 0x80, 0x00, 0x9a, 0xa9, 0x80, 0x00, 0x2b, 0xba, 0x00, 0x00, 0x2b, 0xba, 0x00,
    0x00, 0x2b, 0xba, 0x00, 0x00, 0x0b, 0xb8, 0x00, 0x00, 0x0b, 0xb8, 0x00, 0x00, 0x0b, 0xb8, 0x00,
    0x00, 0x22, 0xa2, 0x00, 0x00, 0x22, 0xa0, 0x00, 0x00, 0x02, 0xa2, 0x00, 0x00, 0x00, 0x80, 0x00,
    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00,
    0x00, 0x00, 0x80, 0x00, 0x00, 0x02, 0xa0, 0x00, 0x00, 0x02, 0xa0, 0x00, 0x00, 0x02, 0xa0, 0x00,
    0x00, 0xa8, 0x8a, 0x80, 0x00, 0xa8, 0x8a, 0x80, 0x00, 0xa8, 0x8a, 0x80, 0x00, 0xa8, 0x8a, 0x80,
    0x00, 0xa8, 0x8a, 0x80, 0x00, 0xa8, 0x8a, 0x80, 0x00, 0xaa, 0xaa, 0x80, 0x00, 0xaa, 0xaa, 0x80,
    0x00, 0xaa, 0xaa, 0x80, 0x00, 0x0a, 0xa8, 0x00, 0x00, 0x0a, 0xa8, 0x00, 0x00, 0x0a, 0xa8, 0x00,
    0x00, 0x02, 0xa0, 0x00, 0x00, 0x02, 0xa0, 0x00, 0x00, 0x02, 0xa0, 0x00, 0x00, 0x02, 0xa0, 0x00,
    0x00, 0x02, 0xa0, 0x00, 0x00, 0x02, 0xa0, 0x00, 0x00, 0x08, 0x88, 0x00, 0x00, 0x08, 0x80, 0x00,
    0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xf4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x3d, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0xa0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

#[no_mangle]
fn start() {
    unsafe {
        *PALETTE = [0x445d70, 0x9f4a4e, 0xdbb9a0, 0xf2eedd];
    }
}

#[no_mangle]
fn update() {
    clear_screen(2);
    unsafe {
        GAME.frame_count += 1;
    }
    unsafe {
        GAME.update();
        GAME.input();

        if GAME.frame_count % 3 == 0 {
            GAME.cat.update();
        }
        GAME.cat.draw();
    }
}

fn clear_screen(bg_color: u8) {
    for y in 0..SCREEN_SIZE {
        for x in 0..SCREEN_SIZE {
            draw_pixel(x as usize, y as usize, bg_color);
        }
    }
}

fn draw_pixel(x: usize, y: usize, color: u8) {
    let idx = (y * SCREEN_SIZE as usize + x) >> 2;
    let shift = (x as u8 & 0b11) << 1;
    let mask = 0b11 << shift;
    unsafe {
        let framebuffer = FRAMEBUFFER.as_mut().expect("framebuffer ref");
        framebuffer[idx] = (color << shift) | (framebuffer[idx] & !mask);
    }
}

fn get_gamepad() -> u8 {
    unsafe { *GAMEPAD1 }
}

fn set_colors(colors: u16) {
    unsafe {
        *DRAW_COLORS = colors;
    }
}

#[panic_handler]
fn panic_handler(_panic_info: &core::panic::PanicInfo<'_>) -> ! {
    trace("panic error");

    #[cfg(debug_assertions)]
    if let Some(cause) = _panic_info.payload().downcast_ref::<&str>() {
        trace(cause);
    }

    wasm32::unreachable()
}
